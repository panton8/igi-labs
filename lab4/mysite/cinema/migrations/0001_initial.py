# Generated by Django 4.2.1 on 2023-06-06 06:33

import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Cashier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=100)),
                ('photo', models.ImageField(upload_to='photos/cashiers')),
            ],
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('date_of_birth', models.DateField()),
                ('email', models.EmailField(max_length=254)),
                ('phone_number', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country', models.CharField(choices=[('United Kingdom', 'United Kingdom'), ('United States', 'United States'), ('China', 'China'), ('France', 'France'), ('Japan', 'Japan'), ('Germany', 'Germany'), ('Canada', 'Canada'), ('India', 'India'), ('Russia', 'Russia'), ('Turkey', 'Turkey'), ('Italy', 'Italy'), ('Spain', 'Spain')], max_length=14)),
            ],
        ),
        migrations.CreateModel(
            name='Film',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('duration', models.PositiveIntegerField(help_text='duration(minutes)', validators=[django.core.validators.MinValueValidator(45), django.core.validators.MaxValueValidator(240)])),
                ('budget', models.FloatField()),
                ('poster', models.ImageField(upload_to='photos/films')),
                ('description', models.TextField()),
                ('rating', models.FloatField(help_text='from 1.0 to 10.0', validators=[django.core.validators.MinValueValidator(1.0), django.core.validators.MaxValueValidator(10.0)])),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='cinema.country')),
            ],
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('genre', models.CharField(choices=[('Action', 'Action'), ('Adventure', 'Adventure'), ('Comedy', 'Comedy'), ('Crime', 'Crime'), ('Drama', 'Drama'), ('Historical', 'Historical'), ('Horror', 'Horror'), ('Musicals', 'Musicals'), ('Science', 'Science'), ('War', 'War'), ('Western', 'Western'), ('Documentary', 'Documentary')], max_length=11)),
            ],
        ),
        migrations.CreateModel(
            name='Hall',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('photo', models.ImageField(upload_to='photos/halls')),
                ('capacity', models.IntegerField(validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(800)])),
            ],
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('available_seats', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('ticket_cost', models.PositiveIntegerField(default=8)),
                ('date', models.DateTimeField()),
                ('cashier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cinema.cashier')),
                ('film', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cinema.film')),
                ('hall', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cinema.hall')),
            ],
        ),
        migrations.CreateModel(
            name='Purchase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bought_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when ticket was bought')),
                ('updated_at', models.DateTimeField(help_text='Date and time when ticket was updated')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cinema.client')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='cinema.session')),
            ],
        ),
        migrations.AddField(
            model_name='hall',
            name='cashiers',
            field=models.ManyToManyField(through='cinema.Session', to='cinema.cashier'),
        ),
        migrations.AddField(
            model_name='film',
            name='genre',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='cinema.genre'),
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(help_text='Enter first name', max_length=200)),
                ('last_name', models.CharField(help_text='Enter last name', max_length=200)),
                ('date_of_birth', models.DateField()),
                ('email', models.EmailField(max_length=254)),
                ('phone_number', models.CharField(max_length=50)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
    ]
